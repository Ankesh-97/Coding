

//1. Inversion count in an array

public class Solution {
    int count;
    public int solve(ArrayList<Integer> A) {
        mergeSort(A,0,A.size()-1);
        return count;
    } 

// MergeSort
    public void mergeSort(ArrayList<Integer> A,int l,int h){
        if(l>=h)
           return;
        int mid = (l+h)/2;

        mergeSort(A,l,mid);
        mergeSort(A,mid+1,h);
        merge(A,l,mid,mid+1,h);
    }
//Merge ALgo
    public void merge(ArrayList<Integer> A,int l1,int r1,int l2,int r2){

        int n1 = r1-l1+1;
        int n2 = r2-l2+1;

        int temp1[] = new int[n1];
        int temp2[] = new int[n2];
        int j=0,p=0;

        for(int i=l1;i<=r1;i++){
            temp1[j++] = A.get(i);
        }

        for(int i=l2;i<=r2;i++){
            temp2[p++] = A.get(i);
        }

         //System.out.println(Arrays.toString(temp1) + " "+Arrays.toString(temp2));

        int l=0,m=0,k=l1;

        while(l<n1 && m<n2){

            if(temp1[l]>temp2[m]){
                A.set(k,temp2[m]);
                count=(int)(((long)(count%1000000007)+((n1%1000000007-l%1000000007)%1000000007)%1000000007));
                m++;
                k++;
            }else{
                A.set(k,temp1[l]);
                l++;
                k++;
            }
        }
        while(l<n1){
            A.set(k,temp1[l]);
            l++;k++;
        }

         while(m<n2){
            A.set(k,temp2[m]);
           // count++;
            m++;k++;
        }

    }
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 2.Largest Number


public class Solution {
 
    public String largestNumber(List<Integer> A) {
        ArrayList<Integer> list = new ArrayList<>();
        int max=A.get(0);
        for(int i=0;i<A.size();i++){
            if(max<A.get(i))
               max=A.get(i);
            list.add(A.get(i));
        }

        if(max==0)
           return "0";

        mergeSort(list,0,list.size()-1);

        StringBuilder sb = new StringBuilder();

        for(int i=0;i<list.size();i++){
             //System.out.println(list.get(i));
             sb.append(list.get(i));
        }

        return sb.toString();
    }

//MergeSort
    public void mergeSort(ArrayList<Integer> A,int l,int h){
        if(l>=h)
           return;
        int mid = (l+h)/2;

        mergeSort(A,l,mid);
        mergeSort(A,mid+1,h);
        merge(A,l,mid,mid+1,h);
    }

//Merge ALgo
    public void merge(ArrayList<Integer> A,int l1,int r1,int l2,int r2){

        int n1 = r1-l1+1;
        int n2 = r2-l2+1;

        int temp1[] = new int[n1];
        int temp2[] = new int[n2];
        int j=0,p=0;

        for(int i=l1;i<=r1;i++){
            temp1[j++] = A.get(i);
        }

        for(int i=l2;i<=r2;i++){
            temp2[p++] = A.get(i);
        }

         //System.out.println(Arrays.toString(temp1) + " "+Arrays.toString(temp2));

        int l=0,m=0,k=l1;

        while(l<n1 && m<n2){

            if(compare(temp1[l],temp2[m])==1){
                A.set(k,temp2[m]);
                //count=(int)(((long)(count%1000000007)+((n1%1000000007-l%1000000007)%1000000007)%1000000007));
                m++;
                k++;
            }else{
                A.set(k,temp1[l]);
                l++;
                k++;
            }
        }
        while(l<n1){
            A.set(k,temp1[l]);
           // count=(count%1000000007+1%1000000007)%1000000007;
            l++;k++;
        }

         while(m<n2){
            A.set(k,temp2[m]);
           // count++;
            m++;k++;
        }

    }

//Abstracted Compare function
    public int compare(Integer a, Integer b)
    {
 
        String s1 = a+""+b;
        String s2 = b+""+a;
       // System.out.println(s1+ " "+s2);
        for(int i=0;i<s1.length();i++){

            if(Integer.parseInt(String.valueOf(s1.charAt(i))) > Integer.parseInt(String.valueOf(s2.charAt(i)))){
                return 0;
            }else if(Integer.parseInt(String.valueOf(s1.charAt(i))) < Integer.parseInt(String.valueOf(s2.charAt(i)))){
                return 1;
            }
        }
        return 1;
    }
}





